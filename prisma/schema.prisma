generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createDate DateTime @default(now())

  accounts Account[]
  sessions Session[]
  runs     Run[]
  Agent    Agent[]

  @@index([email])
  @@index([createDate])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id         String      @id @default(cuid())
  userId     String
  name       String      @db.Text
  goal       String      @db.Text
  deleteDate DateTime?
  createDate DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      AgentTask[]

  @@index([createDate])
  @@index([userId, deleteDate, createDate])
}

model AgentTask {
  id         String    @id @default(cuid())
  agentId    String
  type       String
  status     String?
  value      String    @db.Text
  info       String?   @db.Text
  sort       Int
  deleteDate DateTime?
  createDate DateTime  @default(now())
  agent      Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([type])
  @@index([createDate])
}

model Run {
  id         String   @id @default(cuid())
  userId     String
  createDate DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createDate])
  @@index([userId])
}

model NewRun {
  id          String   @id @default(cuid())
  user_id     String
  create_date DateTime @default(now())
  goal        String   @db.Text

  tasks Task[]

  @@index([user_id, create_date])
  @@index([user_id])
  @@map("agent_run")
}

model Task {
  id          String   @id @default(cuid())
  run_id      String
  type        String
  create_date DateTime @default(now())

  run NewRun @relation(fields: [run_id], references: [id])

  @@index([run_id])
  @@map("agent_task")
}

// WORKFLOW
model Workflow {
  id              String    @id @default(cuid())
  user_id         String
  organization_id String?
  name            String
  description     String    @default("")
  create_date     DateTime  @default(now())
  update_date     DateTime? @updatedAt
  delete_date     DateTime?

  nodes WorkflowNode[]
  edges WorkflowEdge[]

  @@map("workflow")
}

model WorkflowEdge {
  id          String @id @default(cuid())
  workflow_id String
  source      String @db.VarChar(36)
  target      String @db.VarChar(36)

  workflow Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@unique([workflow_id, source, target])
  @@map("workflow_edge")
}

model WorkflowNode {
  id          String    @id @default(cuid())
  ref         String    @db.VarChar(12)
  workflow_id String
  pos_x       Float
  pos_y       Float
  create_date DateTime  @default(now())
  update_date DateTime? @updatedAt
  delete_date DateTime?

  workflow  Workflow    @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  NodeBlock NodeBlock[]

  @@unique([workflow_id, ref])
  @@map("workflow_node")
}

model NodeBlock {
  id      String @id @default(cuid())
  node_id String

  type  String
  input Json

  workflow_node WorkflowNode @relation(fields: [node_id], references: [id], onDelete: Cascade)

  @@index([node_id])
  @@map("node_block")
}
